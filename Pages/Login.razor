@page "/Login"
@inject System.Diagnostics.Stopwatch watch
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject UserStateContainer userState
@using AbpLib;
@using AbpLib.Web;
@using static GlobalObjects;

<div style="padding-bottom:5px;" class="wrapper">
    <div id="formContent">
        <form>
            <input id="TB1" type="text" class="LoginTextBox" placeholder="@TextboxPH[0]" @bind="NameField" @onkeyup="async e => await Login_OnKeypress(e)" @onkeyup:preventDefault="true" tabindex="0" />
            <input id="TB2" class="LoginTextBox" type="password" @bind="PasswordField" placeholder="@TextboxPH[1]" @onkeyup="async e => await Login_OnKeypress(e)" @onkeyup:preventDefault="true" />

            @if (UserCreation)
            {
                <input id="TB3" class="LoginTextBox" type="password" @bind="PasswordFieldConfirm" placeholder="@TextboxPH[2]" />
                <input type="button" value="@Btn1Text" class="LoginBtn" @onclick="async e => await NewUser_OnClick(e)" @onclick:preventDefault="true" />
            }
            else
            {
                <input type="button" value="@Btn1Text" class="LoginBtn" @onclick="async e => await Login_OnClick(e)" @onclick:preventDefault="true" />
            }
        </form>
        <div id="formFooter">
            <label class="col-form-label-sm" @onclick="async e => await SwitchMode(e)" style="cursor:pointer; color:blue;">@LblText</label>
            <div style="background-color: #f6f6f6; width: 150px; position: absolute; align-items: center; justify-content: center;">
                <input type="text" style="color: red; background-color:#f6f6f6;width: 150px;" readonly="readonly" class="InfoText" id="LoginInfo" />
            </div>
        </div>
    </div>
</div>

@code {

    string NameField;
    string PasswordField;
    string PasswordFieldConfirm;

    string Btn1Text;
    string LblText;
    bool UserCreation;

    string[] TextboxPH;


    protected override void OnInitialized()
    {
        if (TextboxPH == null)
        {
            TextboxPH = new string[3];
            TextboxPH[0] = "User";
            TextboxPH[1] = "Password";
            TextboxPH[2] = "";
            LblText = "New user?";
            Btn1Text = "Login";
        }
    }

    protected async Task SwitchMode(MouseEventArgs e)
    {
        UserCreation = !UserCreation;
        TextboxPH[0] = UserCreation ? "Choose a user name" : "User";
        TextboxPH[1] = UserCreation ? "Choose a password" : "Password";
        TextboxPH[2] = UserCreation ? "Confirm password" : "";
        Btn1Text = UserCreation ? "Create user" : "Login";
        LblText = UserCreation ? "Back to login" : "New user?";
        await JS.InvokeVoidAsync("Focus", "TB1");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("Focus", "TB1");
        }
    }

    protected async Task Login_OnClick(MouseEventArgs e)
    {
        try
        {
            watch.Start();
            UserModel m = new UserModel() { Admin = false, UserName = NameField, UserPassword = PasswordField };

            if (!string.IsNullOrEmpty(m.UserName))
            {
                using HttpResponseMessage msg = await client.PostAsync("Validation/UserLogin", m.SERIALIZE_CONTENT());
                string content = await msg.Content.ReadAsStringAsync();
                UserModel user = content.DESERIALIZE<UserModel>();


                if (string.IsNullOrEmpty(user?.UserName))
                {
                    JS.InfoMsg("LoginInfo", "Login failed");
                }
                else
                {
                    userState.SetUser(user);
                    Nav.NavigateTo("Profile");
                }
            }
            else
            {
                JS.InfoMsg("LoginInfo", "Login failed");
            }
            await watch.LogTime("Login", "Login_OnClick", userState.CurrentUser.PropertyView("ProfilePicture"));
        }
        catch (Exception err)
        {
            await err.LogErrors("Login", "Login_OnClick");
        }
    }

    protected async Task NewUser_OnClick(MouseEventArgs e)
    {
        try
        {
            watch.Start();
            UserModel m = new UserModel() { Admin = false, UserName = NameField, UserPassword = PasswordField };

            if (PasswordField != PasswordFieldConfirm)
            {
                JS.InfoMsg("LoginInfo", "Password confirmation failed, please try again");
            }
            else
            {
                using HttpResponseMessage msg = await client.PostAsync("validation/CreateUser", m.SERIALIZE_CONTENT());

                if (await msg.Content.ReadAsStringAsync() == "User was created")
                {
                    await Login_OnClick(e);
                }
            }

            await watch.LogTime("Login", "NewUser_OnClick", m.PropertyView("ProfilePicture"));
        }
        catch (Exception err)
        {
            await err.LogErrors("Login", "NewUser_OnClick");
        }
    }

    protected async Task Login_OnKeypress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            MouseEventArgs mouseClick = new MouseEventArgs();
            if (UserCreation)
            {
                await NewUser_OnClick(mouseClick);
            }
            else
            {
                await Login_OnClick(mouseClick);
            }
        }
    }
}
