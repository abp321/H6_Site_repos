@inject NavigationManager Nav
@inject UserStateContainer userState
@implements IAsyncDisposable

@using static GlobalObjects;

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">MaxiToys</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>

        @if (userState.UserLoggedIn)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="/Profile" Match="NavLinkMatch.All">
                    <span class="oi oi-person" aria-hidden="true"></span> Profile
                </NavLink>
            </li>
        }
        @if (userState.UserLoggedIn)
        {
            <li class="nav-item px-3" style="display:@userState.PanelProp;">
                <NavLink class="nav-link" href="/SysInfo" Match="NavLinkMatch.All">
                    <span class="oi oi-bar-chart" aria-hidden="true"></span> System Info
                </NavLink>
            </li>
            <li class="nav-item px-3" style="display:@userState.PanelProp;">
                <NavLink class="nav-link" href="/Logs" Match="NavLinkMatch.All">
                    <span class="oi oi-list" aria-hidden="true"></span> Logs
                </NavLink>
            </li>

            <li class="nav-item px-3" style="display:@userState.PanelProp;">
                <NavLink class="nav-link" href="/Basket" Match="NavLinkMatch.All">
                    <span class="oi oi-basket" aria-hidden="true"></span> Basket(@userState.BasketList.Count)
                </NavLink>
            </li>
        }
        <li class="nav-item px-3">
            <NavLink class="nav-link" @onclick="async e => await Login_OnClick(e)" style="cursor:pointer;">
                <span class="@userState.LoginIcon" aria-hidden="true"></span> @LoginTxt
            </NavLink>
        </li>
    </ul>
</div>

@code {
    public string LoginTxt => userState.UserLoggedIn ? "Logout" : "Login";

    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(() =>
        {
            userState.OnUserChange += StateHasChanged;
        });
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Login_OnClick(MouseEventArgs e)
    {
        await InvokeAsync(StateHasChanged);
        if (userState.UserLoggedIn)
        {
            userState.BasketList = new List<ItemModel>();
            userState.SetUser(new UserModel());
            await InvokeAsync(StateHasChanged);
            await InvokeAsync(() => Nav.NavigateTo(""));
        }
        else
        {
            await InvokeAsync(() => Nav.NavigateTo("Login"));
        }
    }

    public async ValueTask DisposeAsync()
    {
        await InvokeAsync(() =>
        {
            userState.OnUserChange -= StateHasChanged;
        });
    }

}
